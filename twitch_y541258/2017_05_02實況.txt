http://htmlpreview.github.io/?https://github.com/y541258/HTML5/blob/master/pixel_art.html
步驟1,2,3的對應網址請自行比照輸入看結果
不然把檔案下載下來
目前應該除了版本很舊的瀏覽器或IE外
應該都還能在file:///底下順利執行
(webRTC跟jQuery讀文件這類的,能在file:///底下,也就是沒http伺服器的狀態下
能執行的僅有Firefox或仿Firefox、採Firefox實作方式的)
原始碼
https://github.com/y541258/HTML5/blob/master/pixel_art.html

今天處理點陣圖或說像素風
關於程式面的思考與實作下
自然依然是javascript相關的
畢竟Win32 API一類的
或C#比較簡潔的函數操作還要回想下
又或者說是
那類程式
我還需要去回想下
最單純的.bmp格式

(後來才想到,也許像素風適合手殘人士
或者說對圖畫比較沒概念的)

也許
畢竟...每個人的強項處不太相同
或者說是思考方式本質上的差異
就會有邊是相對傑出的部份

------------------------------------------
步驟一是確定螢幕座標與畫布座標的關係
pixel_art_step_1.html

步驟二是用g鍵開啟予關閉格線功能
(純裝飾用,且開啟時有極度嚴重的緩慢問題,格子越細問題越大)
pixel_art_step_2.html

步驟三是(目前)
想辦法讓上述變成不是裝飾格線功能
暫定策略是
用類似以前 仿VMJP闇箏遊戲的碰撞偵測手法
然後配合陣列(array),確保著色範圍
尚在處理中
pixel_art_step_3.html
(因為Github上刪檔案麻煩,不特別改檔名
也沒有很麻煩啦,就回復版本
或者是git init
rm -f 檔名
push -f origin [branch分支名稱]
之類的這樣)

步驟四是
增加畫筆顏色功能
(能的話個人不是很想做介面
因為除非用手機板,不然滑鼠去點畫面
首先會增加畫面負擔與排版麻煩
其實是個人比較傾向於鍵盤與滑鼠的配合
不太喜歡點太遠
雖然也許要畫的人不是我
但我目前是預計我自己來用這個方法畫)

步驟五要考慮
可能要想辦法做圖層功能
或者是先做樣式功能

步驟六也許會過難(因為個人的想法其實跟步驟沒密切關係)
步驟六是想要取樣出圖騰或者說樣式
也就是說
想要用比較簡單的方式
來處理圖檔點陣化
我是隱約覺得這個會很麻煩
因為Canvas對於畫圖的支援沒那麼細
也就是說
最慘的情況
要自行開伺服器的檔案
讀取後,照著點陣圖或自己處理得來的圖檔格式
然後逐Pixel處理
(相當於回到Win32 API時代)

就先想到這邊
因為步驟6
光用想的好像就已經卡住了

----------------------------------------
處理二維陣列時
突然覺得累、想睡
考慮起來時可能15:00或15:30
就先提早結束實況
(雖然其實13:20開始就在處理電動與點心等雜事了!!)