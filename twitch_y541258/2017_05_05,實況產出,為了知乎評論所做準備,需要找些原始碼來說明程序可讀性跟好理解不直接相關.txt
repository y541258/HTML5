2017_05_05,實況產出,為了知乎評論所做準備,需要找些原始碼來說明程序可讀性跟好理解不直接相關

哦,對,我5/6(也就是今天5/5的明天)放假
但估計那知乎評論處理得不會太順利
此外我假日預期調整下實況時間
(主要是多個午休時間,來吃飯用)
不然買回來吃還是稍嫌不健康些

不過明天實況可能會有意外
因為
https://udn.com/news/story/7238/2444104
簡單來說就是核三歲休出意外
但老實說啦
核三歲休也必須出意外
因為實情是
就算沒出意外
電量照樣會有問題

假若核三沒出意外
就沒有很好的理由
提醒大家節約用電
此外
核三沒出意外
核一核二核三基本上忘記要在2025年還多少年以前
全數退役
(我們的火力發電廠、天然氣發電廠也不太樂觀
就算樂觀,煤礦跟天然氣的價錢,也不見得以現在的收入供得起
其它的發電現階段沒辦法當基載發電
若台灣要跟其它國家借電力
日本太遠
菲律賓、關島、夏威夷─夏威夷是美國領土,這邊僅是簡潔示意表示
基本上更不可能
除非人直接飛去那邊
大陸的交流電頻率是50Hz(歐規),也許記錯
台灣是60Hz吧
因為美國小弟的區域基本上都是60Hz
這樣設備就很難轉換
至少要點技術力才轉得動
像日本北部早期跟蘇俄有關係
所以只好交流電頻率同時有兩種
這也在某些地方造成些困擾
總之就算能借,也沒辦法直接借
況且,若真的能成,我覺得也不叫跟大陸借電
那叫搶劫啊!!)

呀,我知道此舉動沒什麼意義
但不小心認真與承諾了下
不管認真與否,總是要有個形式上的答覆
就算是最後投降也是一樣!!

同步(幾乎)寫在知乎文章中好了
https://zhuanlan.zhihu.com/p/26743238

處理這個不小心引來的爭議

關於爭議內容我還是複製貼上一下好了
(但老實說
本來並不是很想聲張處理的
不過考慮巴哈姆特中
比較沒被麻煩人士叨擾
就還是貼出來下)

******************************************************
為什麼Linux的系統api相比Win32到處是縮寫，有什麼優劣嗎? 造成兩者差別的原因是什麼？

見到個有意思的回答
(其實一看到這問題
基本上就猜到是歷史因素
因為...組合語言早期的指令基本上最多三個字母
此外,以前windows底下的檔名
好像是5個英文字母加上3個副檔名字母
所以早期的安裝程式
才大多叫做setup一類的
因為set up 若中間再加符號

這邊貼首歌好了
「you're one who set it up.
Now you're the one to make it stop.」

(該影片為 Michael learn to rock(可能會簡記為MLTR)的《that's why》)

再加上副檔名
因為副檔名可能是.msc .exe .com
所以5+3=8 若再加任意個字母
就會超出檔名限制)
同時也是當時排名最低的回答
該回答內容是(不是我的回答,我是評論為主)

「函數名太長影響運行時的性能」


我的解釋部份

這不是技術問題
這是推理問題
有些寫競賽、改良算法起家的人
比較不重視函數取名
(取得可讀性再高
照樣放眼全世界沒幾人能看懂或需要看懂
而能看懂的人
其實大多也有
自己在短時間之內實作出來的實力)

此外有件重要的事是
若程序有需要寫
__asm的
用寄存器為主更取不了名稱了

而多數會特別重視函數命名的人
絕大多數都是因為師承關係
而不是自己寫了無數有人在用、需要維護、交接程序後的教訓
也許程序寫得也不差
只是多數不太會開優化, profiler一類的東西等
且開組譯碼後也大多看不懂
(當然變數、函數名稱短可能也會這樣)

--------------------------------------------------
(隱去評論,因為不覺得有需要貼出來)

我5月6日時,若沒出意外的話
再認真回答這想法
(那天時間比較多,此外我可能要準備找幾個Github項目來比對下)
屆時再發知乎文章網址在此

我主要想說的是
函數、變數、常數名稱能解決的事
是對於原本就能懂的人有影響
但是正常情況下
不管名稱取得再多麼清楚
除非目的只是複制貼上就能用
不然是沒什麼影響的

編程語言的大原則是
寫的函數大家幾乎都能懂的
大多僅有兩種情況
1.所有的細節與困難度都被封裝起來,剩下來的人只要呼叫就好
2.在處理的事情本身就很簡單

此外
有時程式碼若要參雜彙編語言(組合語言)的話
就只能倚賴註解的方式
取名影響較小

況且需要除錯、維護時
很多時候就是變數名稱與函數名稱在做的事情其實不如字面上的解釋

--------------------------------------------------

若不以項目(專案、產品、project)來舉例的話
我想可以以全排列為例子
↓這是非遞歸寫法(寫得還算清楚,因為細節部份靠呼叫STL解決)
http://en.cppreference.com/w/cpp/algorithm/next_permutation
↓這是最常見的遞歸寫法(但在處理有重複的全排列時有其它的困擾在)
http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/

你說
這兩種函數都取名為全排列
意義是相同的嗎?

況且那兩個函數或說程序能否看懂
我不覺得變數名稱那些是個很大的問題
當然多少是有些影響

「而就個人經驗
比較會在乎函數取名的
大多不是真的寫過什麼驚天動地的程序的人
而大多是像我程序寫得很差的程序員才會做這類事情
因為程序寫得夠差了
所以變數名稱是否清楚無妨
反正除非是用中文的、比我弱的
不然正常用不著看我寫的程序
那我的程序
若連優化都沒開的話
會跑得比別人慢或占空間
也是可以理解的」
(後來發現我這段確實是重複複製貼上)

--------------------------------------------------

程序員畢竟不是電壓
就算是電壓有時電磁干擾也會照成奇怪錯誤
那也是發現有物質超越光速最容易的做法

(我在知乎評論時沒寫,這邊做些補充說明
關於有個物理實驗室發現個超光速物質
後來其它地方研究下之後
發現實驗的時間點
實驗室的光纖網路傳輸出了些狀況
有可能是那因素導致的
所以在該實驗被重複驗證之前
保留有超過光速的物質之說法)

能的話我是希望大家寫的程式命名有些規範在
但就我的經驗是
多數會被研究的程式
都不具有這特性
像是卡馬克的快速開根法、梅森旋轉質數還有許多
其實他們大可以宣告個
const 這個常數是在做什麼用的名字 = 常數;
這樣也許就有機會好懂上許多
這點我是認可的

但是我會做這些評論的原因
僅是想由句玩笑話指出
這說法在某些情況下是有道理的
類似在台灣
農曆七月開刀確實是較容易出事
但那跟鬼節、鬼月、抓交替的關係沒那麼大
而是另有原因可以某方面反映出那種說法不算空穴來風

不符合形式邏輯的東西
本來就很難要求絕對正確與一體適用

******************************************************

實況產出文件
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

首先是
在不談源碼的狀況下
檔名本身就有一定的欺騙效果

再者
每個人的編程習慣不同
講究程序命名的
有些很奇怪的規範在

例如
可能會禁止這種寫法

(2%2==0)?"T":"F";
(2%2!=0)?"T":"F";

具體運作程序可以參考敝人的Github
http://htmlpreview.github.io/?https://github.com/y541258/HTML5/blob/master/black_history/brain_broken_source_code.html
可以檢視網頁源碼獲知更進一步的訊息

(好吧,後來發現這網頁原始碼的檢視還挺高招的
我不太清楚它是怎麼迴避顯示javascript的
還是有把javascript做些混淆處理
總之在該網頁下進行檢視網頁源碼,會沒那麼順利
所以,雖然個人是在萬般不情願狀況下
進行這篇文章的撰寫
但確實還是能發現自己的不足之處
就算本來就知道自己渾身是破綻亦然)

或者是直接回來這邊看
https://github.com/y541258/HTML5/blob/master/black_history/brain_broken_source_code.html

稍微解釋一下
上述兩段
其中(2%2==0)?"T":"F";這句的意思是
if (2%2==0)
{
return "T";
}
else
{
return "F";
}

上述if寫法其實不太嚴謹
但基本上(2%2==0)?"T":"F";
就是判斷2是否是偶數的選擇敘述
(結構化編程的三個結構是,
循序(Sequence)、選擇(Selection)、重複(Iteration),
當然其中的重複
在些比較新版本的老程序語言與Lisp一開始
Iteration,迭代,也就是迴圈語法
也可以用遞歸(Recursion)來寫
這邊是其中的選擇,
常見的是switch case與if else跟這種三元運算子寫法)

說真的
這舉例是不太好
因為三元運算子
在這編程強國來說
看不懂實在是有些太過侮辱人
或者是
太過對於源碼閱讀的自我標準設得過低

但
若我現在換成這個例子呢
jQuery的源碼
(換句話說就是javascript寫的
通常情況下啦!)

有個jQuery源碼版本用到的功能是
(sorry,正在查網易雲課堂的jQuery源碼講解的網址
因為太久沒寫,通常不會用那類語法來編程
要特別回憶下)

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

我只打算
在2017/05/06 21:00前解決
若我沒在2017/05/07 19:30前被解決的話
(或者是身體臨時不舒服)

之後我的實況
除非有回應能讓我回心轉意
不然
至少2017/06/01之前不再處理這話題
(因為我講的若是對的或大致相符
是件很悲哀的事情
而我講的若是錯的或者是大致上不相符且幾乎是正好相反的情形
那,就是搬石頭砸自己腳)