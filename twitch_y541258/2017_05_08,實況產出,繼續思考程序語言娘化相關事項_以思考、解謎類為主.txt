2017_05_08,實況產出,繼續思考程序語言娘化相關事項_以思考、解謎類為主

寫得感覺很簡略
純粹只是因為我太累
但好在明後天連續休假(但還沒看Line訊息,不確定能不能專心的在假日思索或實況)

我是覺得這個話題是個很不錯的切入點

我有的時候
每過陣子
會想重新整理下自己的體系與對世界的認知吧
那說法有些過於誇張

簡單來說就是
「默默追尋 昨天的我 最遠到哪裡!!」
也就是說
我有什麼辦法,能夠回憶起多久遠以前的事情,又或者多近的事情
「昨天太近,明天太遠!!」

設計遊戲時
要思考些什麼呢?

我想
第一個要思考的是
"主控權的決定"

什麼叫主控權的決定呢
有些遊戲
是有大廳的
那類設計
通常稱為Lobby

代表遊戲好像是
《流星蝴蝶劍》、《淡水阿給》(這款我不太確定)、《英雄聯盟》一類的
流星蝴蝶劍比較不嚴格
有人是把Lobby(大廳)遊戲稱為開房間遊戲
(因為有大廳,所以通常會用room的設計
因此這麼講可能也不算錯
只是有些人可能是故意、意有所指的稱呼
附帶一提,我記得,宿舍的英文是doom還是什麼的
啊,doom是那個遊戲,dorm是宿舍英文全稱的簡寫
學生們是很懶惰的
像實驗室的英文其實也不是lab
博士英文不是phd
只是簡寫就是那樣)
但是...就我所知
唔,我想我還是用Lobby稱呼好了

為什麼要提這個呢?
因為~
工作性質的不同
如果我們把遊戲當成個工作
可能會需要考慮到玩家的自身傾向

所以談到這邊
基本上
我們大概也猜出來
編程語言娘化的遊戲
若是由我來做的話
肯定是會做不只一款
目的倒不是針對全客群
而是因為編程語言本身
我是覺得
除非是能力限制、或程序先天特性的限制
不然,應該要無懼艱難
其實怕也無所謂
先做出來再說

但主控權還有另一層意思
就是擴展內容的決定權
有些遊戲打從一開始
就是把設計權交給玩家
像是
編程(程式設計)這件事本身
還有Minecraft
與些地圖編輯器、關卡編輯器、劇情編輯器
(Koei的遊戲總是被發展成種遊戲製作工具
準確來說是修改啦!!但意思差不多
系統還是能略作更改的!!)
與BassAVG、橙光遊戲一類的
當然,早期的MUD(網路泥巴)也算在內

在廣義些的話
有些遊戲是做個平台
有些像是 市場本身 是讓買賣方交會為主的設計
換個說法就是
"設計者不生產劇情,劇情是在這個地方發生的"
(就像是我目前在台灣
但我要做的事情,雖然有一定限度的不自由
可是原則上還是取決於我的自由意志
不管是否是宿命論)

其實上述只是故意寫得比較怪
就那種
使用者傳檔案為主,並有些交友功能的網頁設計
大多屬於平台類型的

像巴哈姆特
為何能選種族、職業還有HP、精神力那些
雖然我是沒玩過
但是聽說以前有勇者格鬥一類的功能
所以有些差異
然後巴哈姆特太久沒登入的話
血量會持續降低這樣
聽說啦!!
個人並沒有很注意形象

那知乎也本身若當遊戲
其實也極其類似

我覺得編程語言也是有這特性在
所以說
編程語言的娘化手遊
個人覺得會有別於其它的遊戲
那為何會有別於其它的遊戲
原因僅是因為
那類平台類型的遊戲
目前在手機做
限制會較大
特別是越自由的平台越是
(越自由的平台
若連網路的話
安全方面沒做好會造成較嚴重的後果
這也是大陸常見的網頁應用相對少的原因
高流量的狀況下,又要高安全性
在純外行人的狀況下,外行人自己會很難應付這類問題
也許持續有人會做自己的網站
提供些交互式的設計與功能
但通常會避免坐大或者是擴張
一個東西要大量
以目前的經濟與貨幣制度的設計來說
其價格沒辦法高)

------------------------
那剩餘的實況時間先來扯些題外話

我覺得編程語言(程式語言)對我影響最大的地方是
比較能確認想像與現實的落差
而且是在自己付出極低成本的狀況下
用不著貸款開鹽酥雞一類的店
就大致上可以猜出自身未來的命運之類的
所以說是極低成本的狀況下
確認出想像與現實的落差

那若比較唯心主義的話
也就是說
解釋事情時
會傾向於往精神力量的方面去扯
但又不像宗教或些神秘主義那樣
其實我也不太確定
只是唯心主義似乎會傾向於跟宗教、神祕主義切割
(相似的東西才較需要刻意切割
雖然唯心主義有沒有跟宗教、神祕主義切割我不知道也不確定就是了)

編程語言
對我而言
類似於《厚黑學》、《君主論》、《資本論》一類的
這邊指的主要是在於上述書籍
手段需要配合目標與當前處境來決定的共通點的特性來說的

而《資本論》是比較不一樣的一本
它比較類似編程語言
未來很明確
可是實際上要怎麼完成並不清楚

編程語言
若發展到人人都能編程的狀況下
一開始可能會是先採取自然語言
也就是口述就能夠正確回應期待

再來可能是用腦波編程
也就是根據頭腦某個區塊的放電情形來編程
不太清楚意念編程是否與這相同
但我猜技術面會類似於前兩者

比較受期待與大家所害怕的是
編程自己編程
也就是
在缺乏設計者主導的情況下
程序可以自行做出些改變
這一步我覺得很困難
此外
若有辦法辦到前兩步
其實這一步的需求本身不是很大

或者說是大家會想要編程自己編程
其實僅是把這功能
當作要完成意念編程類的前置條件與基礎技術
也就是說
所謂的編程自己編程
可能概念上
也是眾說紛紜的

我不確定程序自己產生程序(編程自己編程)意思是什麼
目前比較公認的編程自己編程
又是另一個概念
就是有段程式碼執行之後
會有種中幻術的感覺
它產生的畫面或者說結果
就是程式自己(Quine或塔珀自指公式)
跟是程序自己產生程序兩回事

那若發展到那時時
編程語言娘化的遊戲還有其意義嗎?
我覺得可能是有的
為什麼要娘化?
有個解釋方式是
對於編程來說
男性化與娘化其實是同一件事情

若撇開視覺上不同的話
編程所需要的是種洞察力與想像力
同時至少用那兩種能力
來確認自己的目標與手段,另個說法是戰略與戰術
是否可行或者是足夠協調

我也是在學編程後
才較過往更會去接觸其它領域的東西
不然個人過往
是覺得除了遊戲編程以外的東西
其實我不是很在意
我以前學其它的東西與現在還能回想起來
主要是為了遊戲的素材
而不是遊戲編程本身
只是在許多年不是在學遊戲編程的狀況下
就算現在個人在設計遊戲
也變得較為傾向於程式設計(Programming)本身了

由於時間緊迫
我就先跳結論(其實結論與想法也是差不多時間得出的)
編程語言娘化或者不娘化
與編程語言相關的遊戲
我的想法是
遊戲過程本身不是以編程為主
而是以解決問題為主
用到編程語言只是巧合
但具體細節還沒想得很清楚

我的想法是
這類是大同人系列
也可能是遊戲設計、製作平台
不過還是得必須要先產生第一個作品
(也可以不是第一個作品
總之,我自己得需要有個作品)

那關於那作品的具體
明天後天放假
除非有其它的事情要處理
不然我明後天應該也主要是在處理這類情形

此外
個人的傾向是
多媒體素材
最好都是由程序本身所產生
或者說是有程序再生的方法
而不純只倚賴做好的多媒體本身
有些像是...
MMD的舞蹈設計
與V家、好像是UTAU一類
套用的內容可能不同
不過僅以MMD與V家本身的功能而言
算是種能重現的設計

上述話的意思是
哦
Data-Driven的奇葩理解法
怎樣的方式能產生初始資訊不是很重要
但不管得到怎樣的初始資訊
我們應當有個方式
可以只倚賴幾個不太要求準確操作的方式
就能還原出多媒體素材

以前好像有談過
電腦鍵盤與電子琴鍵盤的差異
電腦鍵盤通常以打字為主
對於點擊的時間點與按下的時間差
要求很低
(按鍵本身所影響的出力大小也是有關係的地方
但這邊主要不是談這個)

也就是說
絕大多數的情況下
只靠打字
輸出(常見是用Enter鍵)命令的方式
有極大多數的人有能力還原出來

但若是仿畫
甚至是用寫輪眼模仿動作再重現出化的方式
是極度困難的
(前陣子在處理pixel_art.html系列的部分原因是
個人從一開始學編程後不久
又或者說是小時候在吃些早餐時
看到煎荷包蛋或蘿蔔糕一類的早餐店鐵板
也可能是看到燒紙錢的過程
關於一些視覺的效果
(高溫附近時,空氣擾動,有種看得到 氣 的感覺(錯覺)的那種流動現象)
會有種想要找個方式再現出來的想法

若產生某些多媒體素材
我必須倚賴用手畫的方式的話

以《資本論》的看法來說
我的時間運用與分配是很有限的
若有方法能夠改良的話
我的時間運用與分配可能會越來越充裕
那現象就我的理解是"生產力變強"
我想...
編程語言最重要的特性
也許就是與"生產力變強"密切相關
不管是什麼主義的人
編程會盡量的偷懶
假若客戶是比較難纏、吝嗇的
程序員─這邊特指寫程序給別人用的那個人
是不是正職無妨,
可能會隱藏配置文件的方式
或者是自己知道若哪天情況有變
需要改哪幾個地方
但是自己不會去跟客戶說
而是客戶有需要時加錢自己再去處理這樣

而若碰到能保障自己一生的貴人時
也許就不需要用那種手段
但幾乎是只要能力所及
編程會自然而然地往有生產力的方向靠
只是也許某些因素
會故意去拖交差時間與做些陷阱類的事情
不過,這也不改變
程序員會盡量以自己最高的生產力來對應事情
因為若完成的話
剩下來的時間
就算不是自己的
自己能分配的程度也能大幅提升
像是多出些時間睡覺之類的

各位可以回想下
什麼時候會不太想寫、拖延寫作業的時間點?
通常是
覺得作業要完成的話
需要花很多時間
或者是花的時間是固定的
那早些做
不一定真得比較有利

假若學校允許遠距上課
只要修課達多少時數
在多少時間內就是自己可以分配的
或者是可以提早去學校合作還不錯的企業實習甚至是正職的話
大家應該會很有動力在18週之內就解決這件事情
在學校會拖
最主要的原因是
小學之後有中學,中學之後有大學,之後又有...
而台灣又缺乏大陸天才班那種大幅跳級的制度
本來就不是很有動力
要把正常人或者說是大器晚成的人們
在18週內能完成的事情(台灣的大學一學期好像規定是18週)
試著壓在4週(一個月內)完成
而剩下來的時間都在複習或加深
容易傾向於拖
反正,快與慢,對自己的利益並不是很直接相關

結論:
雖然不清楚遊戲要長得怎麼樣子
但我希望玩編程語言相關的遊戲
不是只學boolean代數(True False與眾多邏輯運算子)
或者是語法類的東西
就只是
單純去思考一個東西時
有想到些什麼改良的方式
又或者是某些思考過程
有什麼疏漏的狀況在

個人所想要的編程遊戲
其實就是
"目的與手段的配合"
"具體問題、具體分析、實踐出真知"
"戰略先是對的,但戰術也是採相對好的"
能呈現出這類的話的精神之遊戲

(而這過程中
其實會思考出很多戰術
也許這次的地形與氣候還有許多狀況下
是施展不出來的
但這份思考
在其它地方
也許以後會用到
這也是為何
個人好像從國中開始
就廢話特別多的原因之一

不過,其實
個人很多狀況下不會那麼認真
所以還算喜歡看些實況
像是《LOL》(就英雄聯盟)以前的Joker跟董小颯等人的實況
還有《陰陽師》─冰冷之海
因為祂們實況會說很多思考的過程
有些可能也不是在實況說的
是另外做的視頻說的
個人喜歡的是蒐集那類思考
就像是 青行燈蒐集百物語那樣吧?
還有許多創作者會去蒐藏些自己所重視的東西)

最後再來一次
在羅素
應該是《論工作》中
有句話中文意思大約是
「我想沒有任何東西能比從事建設性工作更能消弭仇恨的」

後來
美國也有一些實驗
也許祂們不知道羅素
但是那研究是發現
若讓兩群人甚至是兩個人
去認領不同的屬性
相互競爭的話
很快人際關係會變得很差
甚至可能會擦槍走火的情形

但若是讓兩群人(這兩群人跟剛才吵起來的是同一批)
合作去完成一件事情的話
關係又會變得很好
那個實驗好像是在童子軍做的
因此合作的項目好像是
蓋樹屋一類的

那為何我不跟別人合作呢?
因為
遊戲設計的合作
我有很多年之後才開始意識到
遊戲設計的通常不是合作
而是外包
絕大多數的情況下
程序只能困擾程序自己的事情,與解決程序自己的困擾
若跨到美工或其它領域
舊有經驗其實幫助有限

也就是說
以我目前的程序實力來說
不管是跟誰
應該都沒辦法合作
我並不是能獨力完成一個作品
但有感於這個作品的內容很多
才去找個能理解與能完成作品的另一個人或一個團隊去合作
純粹是因為
自己跨不到美工
或者是程序能力有限一類的
才想找人

因此
再嘗試了一陣子找勞心工作
與真的從事相對勞心的工作後
我覺得
我在經濟有困難的狀況下
沒辦法認真滴為任何勞心工作付出
這也是後來做現在工作的契機與心態轉變

遊戲跟編程語言都大幅影響我
但遊戲是提供我目標
而編程語言才是修正我過程的核心
有時
一款遊戲是要著重於遊戲的改良
還是編程語言的改良
會產生些混淆

像是程序寫得不太好懂的話
覺得有助於把心神放在更重要的事情上
而若把程序分神在想別人怎麼讀時
會有很多不必要的損耗

而結對編程(pair programming)
某種程度上
能同時達到兩個一起改善的效果
類似於TRIZ理論

TRIZ是 發明問題解決理論
那理論本身也許不是很重要
但TRIZ有個重點是
它只認為
能同時解決兩個或兩個以上的矛盾的事情或些手法
才算得上發明

像是俗話說的
「要讓馬兒好,又要讓馬不吃草」
那發明的可行方案是
做個鐵馬(交通工具)或者是玩具用木馬一類的來取代
就同時讓馬滿足好又滿足不吃草的特性的
才能算得上是發明
(有種絕不妥協的感覺!!)
(雖然嚴格上來說
多數的馬兒不吃草發明,只是不直接吃草
其替代品大多也會影響到耕地面積一類...
但這點小細節就別太在意了
在吉安鄉,別被常識束縛住了!!
此外也許不適合說是小細節
僅僅只是因為因果關係較遠所以不予理會
像是現代法律通常只處理直接因果這樣
會有些防火牆的效果

稍微補充說明下就結束這篇
現代法律只處理直接因果的好處是
分化些常見社會單位的凝聚力
處理直接因果
通常間接代表的是
不採取連坐制度
而在不連坐的狀況下
雖然破案與取證還有很多狀況會造成困難
但若出事的話
大家會傾向於切割關係
「一人做事一人當,就決定是你了」

這方式是不太理想
但若個社會前進
是期望靠少數人
而非大眾的話
會很適合這制度
因為少數人可以利用這類制度
讓自己不致於身陷險境

因為時間因素我暫時不解釋我的立論
那今天實況就到此結束
實況延長到22:00左右了

明後天放假
但實況要看有沒有事
沒事繼續處理
沒事的話可能會發預告
然後實況時間是 10:30~12:00 13:00~16:00左右
將近中午時可能會微調
看早餐與早上實況的狀況來決定
而下午實況
如果過程很耗腦的話
覺得精神不濟時
我可能會開著實況睡覺
或者是關實況去睡覺下再回來實況

其實今天本來也應該要暫停實況或者是實況到一半去睡覺的
但還是撐完好了)